import React, { useState, useEffect } from 'react';

const TemplateManager = ({ onLoadTemplate, currentConfig }) => {
  const [templates, setTemplates] = useState([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showImportModal, setShowImportModal] = useState(false);
  const [newTemplateName, setNewTemplateName] = useState('');
  const [newTemplateDescription, setNewTemplateDescription] = useState('');
  const [importData, setImportData] = useState('');

  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = () => {
    try {
      const savedTemplates = localStorage.getItem('worksheetTemplates');
      if (savedTemplates) {
        setTemplates(JSON.parse(savedTemplates));
      } else {
        // Load default templates
        const defaultTemplates = getDefaultTemplates();
        setTemplates(defaultTemplates);
        localStorage.setItem('worksheetTemplates', JSON.stringify(defaultTemplates));
      }
    } catch (error) {
      console.error('Hiba a sablonok bet√∂lt√©sekor:', error);
    }
  };

  const getDefaultTemplates = () => {
    return [
      {
        id: 'basic_turbo',
        name: 'Alapvet≈ë turb√≥ szerviz',
        description: 'Minim√°lis mez≈ëk turb√≥ jav√≠t√°shoz - gyors munkav√©gz√©shez',
        icon: '‚ö°',
        category: 'basic',
        createdAt: new Date().toISOString(),
        config: {
          title: "Alapvet≈ë Turb√≥ Munkalap",
          workNumberDisplay: {
            show: true,
            position: "top-left",
            format: "MUNKA-#{number}",
            backgroundColor: "#10B981",
            textColor: "#FFFFFF",
            fontSize: "14",
            padding: "10",
            borderRadius: "6",
            borderWidth: "2",
            borderColor: "#059669"
          },
          sections: [
            {
              id: "client_basic",
              title: "√úgyf√©l",
              icon: "üë§",
              fields: [
                {
                  id: "client_name",
                  label: "√úgyf√©l neve",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "client_phone",
                  label: "Telefon",
                  type: "tel",
                  required: true,
                  order: 2,
                  width: "half"
                }
              ]
            },
            {
              id: "vehicle_basic",
              title: "J√°rm≈±",
              icon: "üöó",
              fields: [
                {
                  id: "car_make",
                  label: "M√°rka",
                  type: "dropdown",
                  required: true,
                  order: 1,
                  width: "half",
                  options: ["BMW", "Mercedes", "Audi", "VW", "Ford", "Egy√©b"],
                  allowCustom: true
                },
                {
                  id: "car_model",
                  label: "T√≠pus",
                  type: "text",
                  required: true,
                  order: 2,
                  width: "half"
                }
              ]
            },
            {
              id: "turbo_basic",
              title: "Turb√≥",
              icon: "üîß",
              fields: [
                {
                  id: "turbo_code",
                  label: "Turb√≥ k√≥d",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "received_date",
                  label: "D√°tum",
                  type: "date",
                  required: true,
                  order: 2,
                  width: "half"
                },
                {
                  id: "general_notes",
                  label: "Megjegyz√©sek",
                  type: "textarea",
                  required: false,
                  order: 3,
                  width: "full",
                  rows: 2
                }
              ]
            }
          ]
        }
      },
      {
        id: 'detailed_turbo',
        name: 'R√©szletes turb√≥ szerviz',
        description: 'Teljes adatgy≈±jt√©s minden r√©szlettel - komplex jav√≠t√°sokhoz',
        icon: 'üìã',
        category: 'advanced',
        createdAt: new Date().toISOString(),
        config: {
          title: "R√©szletes Turb√≥ Munkalap",
          workNumberDisplay: {
            show: true,
            position: "top-left", 
            format: "#{number} - R√âSZLETES",
            backgroundColor: "#3B82F6",
            textColor: "#FFFFFF",
            fontSize: "16",
            padding: "12",
            borderRadius: "8",
            borderWidth: "2",
            borderColor: "#1E40AF"
          },
          sections: [
            {
              id: "client_detailed",
              title: "√úgyf√©l adatok",
              icon: "üë§",
              fields: [
                {
                  id: "client_name",
                  label: "Teljes n√©v",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "client_phone",
                  label: "Telefonsz√°m",
                  type: "tel",
                  required: true,
                  order: 2,
                  width: "half"
                },
                {
                  id: "client_email",
                  label: "E-mail c√≠m",
                  type: "email",
                  required: false,
                  order: 3,
                  width: "half"
                },
                {
                  id: "company_name",
                  label: "C√©gn√©v",
                  type: "text",
                  required: false,
                  order: 4,
                  width: "half"
                },
                {
                  id: "client_address",
                  label: "C√≠m",
                  type: "textarea",
                  required: false,
                  order: 5,
                  width: "full",
                  rows: 2
                }
              ]
            },
            {
              id: "vehicle_detailed",
              title: "J√°rm≈± inform√°ci√≥k",
              icon: "üöó",
              fields: [
                {
                  id: "car_make",
                  label: "M√°rka",
                  type: "dropdown",
                  required: true,
                  order: 1,
                  width: "quarter",
                  options: ["BMW", "Mercedes-Benz", "Audi", "Volkswagen", "Ford", "Peugeot", "Renault", "Opel"],
                  allowCustom: true
                },
                {
                  id: "car_model",
                  label: "Modell",
                  type: "text",
                  required: true,
                  order: 2,
                  width: "quarter"
                },
                {
                  id: "car_year",
                  label: "√âvj√°rat",
                  type: "number",
                  required: false,
                  order: 3,
                  width: "quarter",
                  min: 1990,
                  max: 2025
                },
                {
                  id: "license_plate",
                  label: "Rendsz√°m",
                  type: "text",
                  required: false,
                  order: 4,
                  width: "quarter"
                },
                {
                  id: "engine_code",
                  label: "Motork√≥d",
                  type: "text",
                  required: false,
                  order: 5,
                  width: "half"
                },
                {
                  id: "mileage",
                  label: "Km √≥ra",
                  type: "number",
                  required: false,
                  order: 6,
                  width: "half",
                  suffix: "km"
                }
              ]
            },
            {
              id: "turbo_detailed",
              title: "Turb√≥ r√©szletek",
              icon: "üîß",
              fields: [
                {
                  id: "turbo_code",
                  label: "Turb√≥ k√≥d",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "received_date",
                  label: "Be√©rkez√©s",
                  type: "date",
                  required: true,
                  order: 2,
                  width: "half"
                },
                {
                  id: "problem_description",
                  label: "Hibale√≠r√°s",
                  type: "textarea",
                  required: true,
                  order: 3,
                  width: "full",
                  rows: 3
                },
                {
                  id: "symptoms",
                  label: "T√ºnetek",
                  type: "textarea",
                  required: false,
                  order: 4,
                  width: "full",
                  rows: 2
                },
                {
                  id: "general_notes",
                  label: "Tov√°bbi megjegyz√©sek",
                  type: "textarea",
                  required: false,
                  order: 5,
                  width: "full",
                  rows: 2
                }
              ]
            },
            {
              id: "pricing_detailed",
              title: "√Åraz√°s",
              icon: "üí∞",
              fields: [
                {
                  id: "cleaning_price",
                  label: "Tiszt√≠t√°s",
                  type: "number",
                  required: false,
                  order: 1,
                  width: "third",
                  defaultValue: 170,
                  suffix: "LEI"
                },
                {
                  id: "reconditioning_price",
                  label: "Fel√∫j√≠t√°s",
                  type: "number",
                  required: false,
                  order: 2,
                  width: "third",
                  defaultValue: 170,
                  suffix: "LEI"
                },
                {
                  id: "turbo_price",
                  label: "Turb√≥",
                  type: "number",
                  required: false,
                  order: 3,
                  width: "third",
                  defaultValue: 240,
                  suffix: "LEI"
                }
              ]
            }
          ]
        }
      },
      {
        id: 'quick_diagnosis',
        name: 'Gyors diagnosztika',
        description: 'Gyors ellen≈ërz√©shez sz√ºks√©ges mez≈ëk - el≈ëzetes vizsg√°lathoz',
        icon: 'üîç',
        category: 'diagnostic',
        createdAt: new Date().toISOString(),
        config: {
          title: "Gyors Diagnosztika Lap",
          workNumberDisplay: {
            show: true,
            position: "top-right",
            format: "DIAG-{number}",
            backgroundColor: "#F59E0B",
            textColor: "#FFFFFF",
            fontSize: "15",
            padding: "10",
            borderRadius: "6",
            borderWidth: "2",
            borderColor: "#D97706"
          },  
          sections: [
            {
              id: "client_quick",
              title: "√úgyf√©l",
              icon: "üë§",
              fields: [
                {
                  id: "client_name",
                  label: "N√©v",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "client_phone",
                  label: "Telefon",
                  type: "tel",
                  required: true,
                  order: 2,
                  width: "half"
                }
              ]
            },
            {
              id: "diagnostic_info",
              title: "Diagnosztika",
              icon: "üîç",
              fields: [
                {
                  id: "turbo_code",
                  label: "Turb√≥ k√≥d",
                  type: "text",
                  required: true,
                  order: 1,
                  width: "half"
                },
                {
                  id: "check_date",
                  label: "Vizsg√°lat d√°tuma",
                  type: "date",
                  required: true,
                  order: 2,
                  width: "half"
                },
                {
                  id: "visual_inspection",
                  label: "Szemrev√©telez√©s",
                  type: "radio",
                  required: true,
                  order: 3,
                  width: "half",
                  options: ["OK", "Hib√°s", "Gyan√∫s"]
                },
                {
                  id: "pressure_test",
                  label: "Nyom√°spr√≥ba",
                  type: "radio",
                  required: false,
                  order: 4,
                  width: "half",
                  options: ["Megfelel≈ë", "Alacsony", "Nincs"]
                },
                {
                  id: "diagnosis_result",
                  label: "Diagnosztika eredm√©nye",
                  type: "dropdown",
                  required: true,
                  order: 5,
                  width: "full",
                  options: [
                    "Jav√≠that√≥",
                    "Cser√©re szorul", 
                    "Tov√°bbi vizsg√°lat sz√ºks√©ges",
                    "Haszn√°lhat√≥",
                    "Nem jav√≠that√≥"
                  ]
                },
                {
                  id: "recommendations",
                  label: "Javaslatok",
                  type: "textarea",
                  required: false,
                  order: 6,
                  width: "full",
                  rows: 3
                }
              ]
            }
          ]
        }
      }
    ];
  };

  const saveTemplate = () => {
    if (!newTemplateName.trim()) {
      alert('Adja meg a sablon nev√©t!');
      return;
    }

    const newTemplate = {
      id: `custom_${Date.now()}`,
      name: newTemplateName,
      description: newTemplateDescription,
      icon: 'üìù',
      category: 'custom',
      createdAt: new Date().toISOString(),
      config: currentConfig
    };

    const updatedTemplates = [...templates, newTemplate];
    setTemplates(updatedTemplates);
    localStorage.setItem('worksheetTemplates', JSON.stringify(updatedTemplates));
    
    setShowCreateModal(false);
    setNewTemplateName('');
    setNewTemplateDescription('');
    
    alert('Sablon sikeresen mentve!');
  };

  const deleteTemplate = (templateId) => {
    if (!window.confirm('Biztosan t√∂r√∂lni szeretn√©d ezt a sablont?')) return;
    
    const updatedTemplates = templates.filter(t => t.id !== templateId);
    setTemplates(updatedTemplates);
    localStorage.setItem('worksheetTemplates', JSON.stringify(updatedTemplates));
  };

  const exportTemplate = (template) => {
    const exportData = {
      name: template.name,
      description: template.description,
      config: template.config,
      exportedAt: new Date().toISOString(),
      version: "1.0"
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `${template.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_template.json`;
    link.click();
    
    URL.revokeObjectURL(url);
  };

  const importTemplate = () => {
    try {
      const templateData = JSON.parse(importData);
      
      const newTemplate = {
        id: `imported_${Date.now()}`,
        name: templateData.name || 'Import√°lt sablon',
        description: templateData.description || 'Import√°lva k√ºls≈ë forr√°sb√≥l',
        icon: 'üì•',
        category: 'imported',
        createdAt: new Date().toISOString(),
        config: templateData.config
      };
      
      const updatedTemplates = [...templates, newTemplate];
      setTemplates(updatedTemplates);
      localStorage.setItem('worksheetTemplates', JSON.stringify(updatedTemplates));
      
      setShowImportModal(false);
      setImportData('');
      alert('Sablon sikeresen import√°lva!');
    } catch (error) {
      alert('Hib√°s sablon form√°tum! Ellen≈ërizze a JSON strukt√∫r√°t.');
    }
  };

  const getCategoryIcon = (category) => {
    switch (category) {
      case 'basic': return '‚ö°';
      case 'advanced': return 'üìã';
      case 'diagnostic': return 'üîç';
      case 'custom': return 'üìù';
      case 'imported': return 'üì•';
      default: return 'üìÑ';
    }
  };

  const getCategoryName = (category) => {
    switch (category) {
      case 'basic': return 'Alapvet≈ë';
      case 'advanced': return 'R√©szletes';
      case 'diagnostic': return 'Diagnosztika';
      case 'custom': return 'Egy√©ni';
      case 'imported': return 'Import√°lt';
      default: return 'Egy√©b';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold">üìö Sablon kezel≈ë</h3>
          <p className="text-gray-600">Mentse el √©s haszn√°lja √∫jra munkalap konfigur√°ci√≥it</p>
        </div>
        <div className="flex gap-2">
          <button
            onClick={() => setShowImportModal(true)}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 text-sm"
          >
            üì• Import
          </button>
          <button
            onClick={() => setShowCreateModal(true)}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 text-sm"
          >
            üíæ Ment√©s sablonk√©nt
          </button>
        </div>
      </div>

      {/* Templates Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {templates.map(template => (
          <div key={template.id} className="bg-white rounded-lg shadow-md border hover:shadow-lg transition-shadow">
            <div className="p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex items-center gap-2">
                  <span className="text-2xl">{template.icon}</span>
                  <div>
                    <h4 className="font-semibold text-gray-800">{template.name}</h4>
                    <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                      {getCategoryIcon(template.category)} {getCategoryName(template.category)}
                    </span>
                  </div>
                </div>
              </div>
              
              <p className="text-sm text-gray-600 mb-4 min-h-[40px]">
                {template.description}
              </p>
              
              <div className="text-xs text-gray-500 mb-4">
                {template.config.sections?.length || 0} szekci√≥ ‚Ä¢ 
                {template.config.sections?.reduce((total, section) => total + (section.fields?.length || 0), 0) || 0} mez≈ë
              </div>
              
              <div className="flex gap-2">
                <button
                  onClick={() => onLoadTemplate(template.config)}
                  className="flex-1 bg-blue-500 text-white px-3 py-2 rounded text-sm hover:bg-blue-600"
                >
                  üìã Bet√∂lt√©s
                </button>
                <button
                  onClick={() => exportTemplate(template)}
                  className="bg-gray-500 text-white px-3 py-2 rounded text-sm hover:bg-gray-600"
                  title="Export"
                >
                  üì§
                </button>
                {template.category === 'custom' && (
                  <button
                    onClick={() => deleteTemplate(template.id)}
                    className="bg-red-500 text-white px-3 py-2 rounded text-sm hover:bg-red-600"
                    title="T√∂rl√©s"
                  >
                    üóëÔ∏è
                  </button>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Create Template Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">√öj sablon l√©trehoz√°sa</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Sablon neve *
                </label>
                <input
                  type="text"
                  value={newTemplateName}
                  onChange={(e) => setNewTemplateName(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                  placeholder="pl. Saj√°t turb√≥ konfigur√°ci√≥"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Le√≠r√°s
                </label>
                <textarea
                  value={newTemplateDescription}
                  onChange={(e) => setNewTemplateDescription(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
                  rows="3"
                  placeholder="R√∂vid le√≠r√°s a sablon haszn√°lat√°r√≥l..."
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50"
              >
                M√©gsem
              </button>
              <button
                onClick={saveTemplate}
                className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
              >
                üíæ Ment√©s
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Import Template Modal */}
      {showImportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl">
            <h3 className="text-lg font-semibold mb-4">Sablon import√°l√°sa</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  JSON sablon adatok
                </label>
                <textarea
                  value={importData}
                  onChange={(e) => setImportData(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 font-mono text-sm"
                  rows="12"
                  placeholder='Illessze be a JSON sablon adatokat itt...'
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <button
                onClick={() => setShowImportModal(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50"
              >
                M√©gsem
              </button>
              <button
                onClick={importTemplate}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                üì• Import
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TemplateManager;